package com.turingjavaee7.demo.aop;

import org.aopalliance.intercept.Joinpoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Aspect;  
import org.aspectj.lang.annotation.Before;  
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.context.annotation.Configuration;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;  
  
//@Component
@Configuration
@Aspect 
@Slf4j
public class LoggingAspect {
	@Pointcut("@annotation(Log)")  
    public void logPointcut(){  
    }  
    
//    @Before("logPointcut()") 
    @Before("execution(* com.turingjavaee7.demo.controller.*.*(..))")
    public void logBefore(Joinpoint joinPoint){  
    	log.info("In Aspect");  
        System.out.println("In Aspect Before "+joinPoint.toString());  
    }  
    
    @After("execution(* com.turingjavaee7.demo.controller.*.*(..))")
    public void logAfter(Joinpoint joinPoint){  
    	log.info("In Aspect");  
        System.out.println("In Aspect After "+joinPoint.toString());  
    }  
    
    @Before("within(com.turingjavaee7.demo.controller..*)")
    public void logWithinBefore(Joinpoint joinPoint){  
    	log.info("In Aspect");  
        System.out.println("In Aspect Within Before "+joinPoint.toString());  
    }  
    
    @After("within(* com.turingjavaee7.demo.controller.*.*(..))")
    public void logWithinAfter(Joinpoint joinPoint){  
    	log.info("In Aspect");  
        System.out.println("In Aspect Within After "+joinPoint.toString());  
    }  
}
